# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: (c) Copyright 2023 Advanced Micro Devices, Inc.
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.1
  name: onloads.onload.amd.com
spec:
  group: onload.amd.com
  names:
    kind: Onload
    listKind: OnloadList
    plural: onloads
    singular: onload
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Onload is the Schema for the onloads API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec is the top-level specification for onload and related
              products that are controlled by the onload operator
            properties:
              devicePlugin:
                description: DevicePlugin is the specification of the device plugin
                  that will add a new onload resource into the cluster.
                properties:
                  devicePluginBuild:
                    description: Specific instructions for building the device plugin
                      image.
                    type: object
                  devicePluginImage:
                    description: DevicePluginImage
                    type: string
                  imagePullPolicy:
                    description: 'ImagePullPolicy is the policy used when pulling
                      images. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
                    type: string
                required:
                - devicePluginImage
                type: object
              onload:
                description: Onload is the specification of the version of onload
                  to be used by this CR
                properties:
                  build:
                    description: Build contains build options for building user level
                      components. If non-nil the operator will attempt to build the
                      required images using what is defined in the build section,
                      and push the images to the specified locations.
                    type: object
                  imagePullPolicy:
                    description: 'ImagePullPolicy is the policy used when pulling
                      images. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
                    type: string
                  kernelMappings:
                    description: KernelMappings is a list of pairs of kernel versions
                      and container images. This allows for flexibility when there
                      are heterogenous kernel versions on the nodes in the cluster.
                    items:
                      properties:
                        build:
                          description: Build contains build options for building kernel
                            level components. If non-nil the operator will attempt
                            to build the required images using what is defined in
                            the build section, and push the images to the specified
                            locations.
                          type: object
                        kernelModuleImage:
                          description: KernelImage is the image that contains the
                            out-of-tree kernel modules used by onload, including the
                            sfc driver.
                          type: string
                        regexp:
                          description: Regexp is a regular expression that is used
                            to match against the kernel versions of the nodes in the
                            cluster
                          type: string
                      required:
                      - kernelModuleImage
                      - regexp
                      type: object
                    type: array
                  userImage:
                    description: UserImage is the image that contains the built userland
                      objects, used by the cplane and deviceplugin DaemonSets.
                    type: string
                  version:
                    description: Version string to associate with this onload CR.
                    type: string
                required:
                - kernelMappings
                - userImage
                - version
                type: object
              selector:
                additionalProperties:
                  type: string
                description: Selector defines the set of nodes that this onload CR
                  will run on.
                type: object
            required:
            - devicePlugin
            - onload
            - selector
            type: object
          status:
            description: Status contains the statuses for onload and related products
              that are controlled by the onload operator
            properties:
              conditions:
                description: Conditions store the status conditions of Onload
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              devicePlugin:
                description: Status of the device plugin
                type: object
              onload:
                description: Status of onload components
                type: object
            required:
            - devicePlugin
            - onload
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
